<?phpnamespace App\AdminModule\Presenters;use Nette\Utils\Html;use DbTable;use Ublaboo\DataGrid\DataGrid;use PeterVojtech;/** * Prezenter pre administraciu slider-u. *  * Posledna zmena(last change): 24.05.2017 * * Modul: ADMIN * * @author Ing. Peter VOJTECH ml. <petak23@gmail.com> * @copyright  Copyright (c) 2012 - 2017 Ing. Peter VOJTECH ml. * @license * @link       http://petak23.echo-msz.eu * @version 1.0.8 */class SliderPresenter extends \App\AdminModule\Presenters\BasePresenter {  /**    * @inject   * @var DbTable\Slider */  public $slider;  /** @var array Nastavenie slider-u */  private $slider_i;    /** @var Forms\Slider\EditSliderFormFactory @inject*/	public $editSliderForm;    protected function startup() {		parent::startup();		$nastavenie = $this->context->parameters;		if (isset($nastavenie['slider'])) {			$this->slider_i = $nastavenie['slider'];      $this->template->slider_i = $this->slider_i;		}	}  /** Render defaultnej akcie */  public function renderDefault() {    $this->template->tabulka = $this->slider->getSlider('id');	}  /** Akcia pre pridanie položky slideru */	public function actionAdd() {    $this["sliderEditForm"]->setDefaults(['poradie' => $this->slider->getNextCounter()]);    $this->setView('Edit');	}  /**   * Akcia pre editaciu polozky slider-u   * @param int $id id editovanej polozky   */	public function actionEdit($id) {    if (($pol_slider = $this->slider->find($id)) === FALSE) {      $this->setView('notFound');		} else {      $this->template->sucasny = $pol_slider;			$this["sliderEditForm"]->setDefaults($pol_slider);      $this["sliderEditForm"]->setDefaults(['zobrazenie_null' => ($pol_slider->zobrazenie==NULL) ? 1 : 0]);    }	}    public function createComponentSliderGrid($name) {		$grid = new DataGrid($this, $name);		$grid->setDataSource($this->slider->findAll());    $grid->setSortable();    $grid->addColumnText('subor', 'Subor')->setTemplate(__DIR__ . '/templates/Slider/grid.subor.latte');		$grid->addColumnText('poradie', 'Poradie');    $grid->addColumnText('nadpis', 'Nadpis')          ->setRenderer(function($item) {            return ($item->nadpis !== NULL ? $item->nadpis : 'Bez nadpisu');          });    $grid->addColumnText('zobrazenie', 'Zobrazenie')          ->setRenderer(function($item) {            return ($item->zobrazenie !== NULL ? $item->zobrazenie : 'Vždy');          });    $grid->addAction('edit', '')         ->setIcon('pencil-square fa-1_5x')         ->setClass('edit-ikon');    $grid->addAction('delete', '', 'confirmDelForm:confirmDelete!')         ->setIcon('trash fa-1_5x')         ->setClass('del-ikon');	}	/** Edit Slider form component factory for admin.	 * @return Nette\Application\UI\Form	 */	public function createComponentSliderEditForm() {    $form = $this->editSliderForm->create($this->context->parameters);      $form['uloz']->onClick[] = function ($button) {      $this->flashOut(!count($button->errors), 'Slider:', 'Položka bola uložená!', 'Došlo k chybe a adresa sa neuložila. Skúste neskôr znovu...');		};    $form['cancel']->onClick[] = function () {			$this->redirect('Slider:');		};		return $this->_vzhladForm($form);	}  /**   * Komponenta Confirmation Dialog pre delete News   * @return Nette\Application\UI\Form */  public function createComponentConfirmDelForm() {    $form = new PeterVojtech\Confirm\ConfirmationDialog($this->getSession('news'));    $form->addConfirmer(        'delete', // názov signálu bude confirmDelete!        [$this, 'confirmedDelete'], // callback na funkciu pri kliknutí na YES        [$this, 'questionDelete1'] // otázka    );    return $form;  }    /**   * Zostavenie otázky pre ConfDialog s parametrom   * @param Nette\Utils\Html $dialog   * @param array $params   * @return string $question */  public function questionDelete1($dialog, $params) {     $dialog->getQuestionPrototype();     $temp_del = $this->slider->find($params['id']);     return sprintf("Naozaj chceš zmazať obrázok '%s'?", $temp_del->subor);  }  /** Funkcia pre spracovanie signálu vymazavania	  * @param int $id - id polozky v hlavnom menu		* @param string $nazov - nazov polozky z hl. menu - na zrusenie?		* @param string $druh - blizsia specifikacia, kde je to potrebne		*/	function confirmedDelete($id)	{    $temp_del = $this->slider->find($id);    if (is_file('www/files/slider/'.$temp_del->subor)) { unlink($this->context->parameters["wwwDir"]."/www/files/slider/".$temp_del->subor); }    $this->_ifMessage($temp_del->delete() == 1, 'Položka bola úspešne vymazaná!', 'Došlo k chybe a položka nebola vymazaná!');    $this->redirect('Slider:');  }    public function handleSort($item_id, $prev_id, $next_id) {//    $this->slider = $this->em->getRepository(Item::class);    $item = $this->slider->find($item_id);    /**     * 1, Find out order of item BEFORE current item     */    if (!$prev_id) {        $previousItem = NULL;    } else {        $previousItem = $this->slider->find($prev_id);    }    /**     * 2, Find out order of item AFTER current item     */    if (!$next_id) {        $nextItem = NULL;    } else {        $nextItem = $this->slider->find($next_id);    }    /**     * 3, Find all items that have to be moved one position up     */    $itemsToMoveUp = $this->slider->findBy(['poradie <='.($previousItem ? $previousItem->poradie : 0), 'poradie >'. $item->poradie]);//        ->where('r.order <= :order')//        ->setParameter('order', $previousItem ? $previousItem->getOrder() : 0)//        ->andWhere('r.order > :order2')//        ->setParameter('order2', $item->getOrder())//        ->getQuery()//        ->getResult();////    foreach ($itemsToMoveUp as $t) {//        $t->setOrder($t->getOrder() - 1);//        $this->em->persist($t);//    }////    /**//     * 3, Find all items that have to be moved one position down//     *///    $itemsToMoveDown = $this->slider->createQueryBuilder('r')//        ->where('r.order >= :order')//        ->setParameter('order', $nextItem ? $nextItem->getOrder() : 0)//        ->andWhere('r.order < :order2')//        ->setParameter('order2', $item->getOrder())//        ->getQuery()//        ->getResult();////    foreach ($itemsToMoveDown as $t) {//        $t->setOrder($t->getOrder() + 1);//        $this->em->persist($t);//    }    /**     * Update current item order     *///    if ($previousItem) {//        $item->setOrder($previousItem->getOrder() + 1);//    } else if ($nextItem) {//        $item->setOrder($nextItem->getOrder() - 1);//    } else {//        $item->setOrder(1);//    }//    $this->em->persist($item)->flush();    $this->flashMessage("Id: $item_id, Previous id: $prev_id, Next id: $next_id", 'success');    $this->redrawControl('flashes');    $this['sliderGrid']->redrawControl();}}	